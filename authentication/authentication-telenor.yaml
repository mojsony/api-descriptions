swagger: '2.0'
host: bankapi.net
basePath: /v1/authentication
info:
  description: |
          Authentication API authenticates application, customer and users based on credentials provided and issues
          OAuth 2.0 bearer token with appropriate claims.
          Two legged authorization flow is supported as described in Accessing Multichannel APIs.
          With Party Authentication API you can:
            - Get bearer token based on user credentials
            - Get bearer token based on refresh token
            - Invalidate bearer token upon user logout
  title: Authentication API
  version: beta
tags:
  - description: Working with authentication.
    name: Access tokens
  - description: Working with two factor authentication.
    name: Challenge response
consumes:
  - application/json
produces:
  - application/json
paths:
  /login:
    post:
      description: Authenticates user with provided credentials and generates access token that should be used afterwards for all API operations.
      operationId: AccessTokens_Obtain
      parameters:
        - description: Command contains user credentials necessary for authentication.
          in: body
          name: cmd
          required: true
          schema:
            $ref: '#/definitions/obtain-access-token-command'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/access-token'
        '440':
          description: |
            Your request was well constructed but it does not comply with business policy. Consider the following possible problems and look into response for more details: 
              - [invalid-credentials]()
              - [email-not-verified]()
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'
      summary: Logins user with provided credentials.
      tags:
        - Access tokens
      x-asee-tags: []
  /external-login:
    post:
      description: Authenticates user with third party login provider using provided credentials.
      operationId: AccessTokens_ObtainExternal
      parameters:
        - description: Command contains user credentials necessary for external provider authentication.
          in: body
          name: cmd
          required: true
          schema:
            $ref: '#/definitions/obtain-external-access-token-command'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/access-token'
        '440':
          description: |
            Your request was well constructed but it does not comply with business policy. Consider the following possible problems and look into response for more details: 
              - [provider-not-supported]()
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'
      summary: Logins user with third party login provider.
      tags:
        - Access tokens
      x-asee-tags: []
  /logout:
    post:
      description: Invalidates access token for provided user.
      operationId: AccessTokens_Invalidate
      parameters:
        - description: Command contains parameters for invalidating access token.
          x-asee-compliance: Do we need this parameter at all? Customer number comes through invocation context.
          in: body
          name: cmd
          required: true
          schema:
            $ref: '#/definitions/invalidate-access-token-command'
      responses:
        '204':
          description: No content
      summary: Performs user logout.
      tags:
        - Access tokens
      x-asee-tags: []
  /challenge:
    post:
      description: 'Generates challenge code for selected authentication method. Supported authentication methods: sms-otp, challenge-response, mac.'
      operationId: ChallengeResponse_Generate
      parameters:
        - description: Command contains parameters for generating challenge code.
          in: body
          name: cmd
          required: true
          schema:
            $ref: '#/definitions/generate-challenge-command'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/challenge'
        default:
          $ref: '#/responses/default-error-response'
      summary: Generates challenge code.
      tags:
        - Challenge response
      x-asee-tags: []
  /response:
    post:
      description: 'Validates provided response code against previously created challenge. Supported authentication methods: sms-otp, challenge-response, mac.'
      operationId: ChallengeResponse_Validate
      parameters:
        - description: Command contains response code that should be validated.
          in: body
          name: cmd
          required: true
          schema:
            $ref: '#/definitions/validate-response-command'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/command-result'
        default:
          $ref: '#/responses/default-error-response'
      summary: Validates provided response code based on created challenge.
      tags:
        - Challenge response
      x-asee-tags: []
parameters: {}
definitions:
  obtain-access-token-command:
    description: Contains credentials necessary for user authentication and getting the bearer token.
    example:
      grant-type: client-credentials
      client-number: webapp
      client-secret: 1234
      username: test
      password: Test.1
      user-data: 
      code: 
      refresh-token: 
    properties:
      grant-type:
        description: Grant type provided in request.
        enum:
          - password
          - client-credentials
          - refresh-token
          - implicit
          - authorization-code
        type: string
      client-number:
        description: Client identifier.
        type: string
      client-secret:
        description: Client secret.
        type: string
      username:
        description: Username.
        type: string
      password:
        description: Password.
        type: string
      user-data:
        description: Token serial number.
        type: string
      code:
        description: Authorization code.
        type: string
      refresh-token:
        description: Refresh token.
        type: string
    required:
      - grant-type
      - client-number
      - client-secret
    type: object
  access-token:
    description: Contains the bearer token generated for successfully authenticated user.
    example:
      customer-number: 298765
      token: LKSDGFOPWQEITPOTREWTO124WKLTWRELT
      refresh-token: 
    properties:
      customer-number:
        description: Customer identifier.
        type: string
      token:
        description: Generated bearer token.
        type: string
      refresh-token:
        description: Refresh token allowing application to renew bearer token at any time.
        type: string
    type: object
  business-problem:
    description: Describes the situation when request is well formed, but some business policy does not allow it to be executed.
    example:
      type: Business policy problem.
      title: Insufficient funds
      details: Raised when funds are not sufficient for withdrawal.
    properties:
      type:
        description: Type of error that is clasified as business policy violation problem.
        type: string
      title:
        description: Short description.
        type: string
      details:
        description: Detailed description of particular problem.
        type: string
    type: object
  obtain-external-access-token-command:
    description: Contains credentials necessary for authentication with third party login provider.
    example:
      code: Code
      provider: Provider
      redirect-uri: RedirectUri
    properties:
      code:
        description: Authorization code.
        type: string
      provider:
        description: Identifier of authentication service provider.
        type: string
      redirect-uri:
        description: Callback, redirection uri.
        type: string
    required:
      - code
      - provider
    type: object
  invalidate-access-token-command:
    x-asee-compliance: Do we need this request object at all? Customer number comes through invocation context.
    description: Contains parameters for customer logout.
    example:
      customer-number: 298765
    properties:
      customer-number:
        description: Customer identifier.
        type: string
    required:
      - customer-number
    type: object
  generate-challenge-command:
    description: Contains parameters for creating challenge code for selected authentication method.
    example:
      customer-number: 298765
      authentication-method: sms-otp
      user-data: KLSDGFOEIWQTAGF
      token-sn: 234567
    properties:
      customer-number:
        x-asee-compliance: Isn't this parameter already retrieved through invocation context? Should it be removed?
        description: Customer identifier
        type: string
      authentication-method:
        description: Type of challenge code to be generated.
        enum:
          - sms-otp
          - challenge-response
          - mac
        type: string
      user-data:
        description: Used for authentications where generated code depends on some user input. Necessary for mac authentication.
        x-asee-compliance: In object below this is array of strings. Should it be array of strings here too?
        type: string
      token-sn:
        description: Serial number of token. Used for challenge-response and mac authentication. Shouldn't be used for sms-otp.
        type: string
    required:
      - customer-number
      - authentication-method
    type: object
  challenge:
    description: Contains information about generated challenge code.
    example:
      challenge-code: ChallengeCode
    properties:
      challenge-code:
        description: Generated challenge code according to specified authentication method. This code will be used for response validation.
        type: string
    type: object
  validate-response-command:
    description: Contains response code that should be validated against previously created challenge.
    example:
      response-code: Response
      challenge-code: ChallengeCode
      authentication-method: otp
      token-sn: 329783
    properties:
      response-code:
        description: 'Response generated by the client. For example: OTP that is received by SMS or key generate by mobile token app'
        type: string
      challenge-code:
        description: Previously generated challenge code.
        type: string
      authentication-method:
        description: Authentication method.
        enum:
          - sms-otp
          - challenge-response
          - mac
        type: string
      token-sn:
        description: Serial number of token. Used for challenge-response and mac authentication. Shouldn't be used for sms-otp.
        type: string
      user-data:
        description: Used for authentications where generated code depends on some user input. Necessary for mac authentication.
        items:
          type: string
        type: array
    required:
      - response-code
      - authentication-method
    type: object
  command-result:
    description: Command result provides status of operation and identifier of the record.
    example:
      id: 234567
      created-record-status: accepted
    properties:
      id:
        description: 'Id of created, updated or deleted entity.'
        type: string
      created-record-status:
        description: 'Created, updated, deleted record status.'
        type: string
    type: object
responses:
  default-error-response:
    description: 'Besides specific status codes above, other standard http [status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) can be returned for each request. To learn more see general guidance on [error handling]()'
schemes:
  - http
