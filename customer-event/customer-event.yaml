swagger: '2.0'
x-asee-visibility: internal
host: bankapi.net
basePath: /beta/customer-event
info:
  description: |
    Customer Event API provides access to wide range of customer events to build a comprehensive history of customer activity that can support relationship management and behavioral analysis. This includes key sales and offer events, relationship management events, product delivery events, communications, financial transactions, customer service events and possibly externally sourced customer activity such as social media events. In future versions, beyond inquiry over customer event history, API will enable subscribing for server side event delivery using web hooks, in-browser event delivery using websockets and mobile device event delivery using push notifications. Recording of new events is available for systems that cannot publish their events to event bus.

  title: Customer Event API
  version: beta
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Events
    description: Working with events

paths:
  /me/events:
    get:
      summary: List events for authenticated customer
      description: Response contains events that are related to authenticated customer and match supplied criteria
      operationId: Events_GetMyList
      parameters:
        - $ref: '#/parameters/event-kind-param'
        - $ref: '#/parameters/stream-param'        
        - $ref: '#/parameters/date-from-param'
        - $ref: '#/parameters/date-to-param'
        - $ref: '#/parameters/page-size-param'
        - $ref: '#/parameters/page-param'
        - $ref: '#/parameters/sort-order-param'
        - $ref: '#/parameters/sort-by-param'
        - $ref: '#/parameters/include-param'
        - $ref: '#/parameters/trim-param'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/event-list'
        default:
            $ref: '#/responses/default-error-response'
      tags:
        - Events
      x-asee-tags:
        - Pageable
        - Sortable
        - Shapeable
        
  /events/{stream}:
    get:
      summary: List events from a given stream
      description: Response contains events from specified stream that match supplied criteria
      operationId: Events_GetStream      
      parameters:
        - $ref: '#/parameters/event-kind-param'
        - $ref: '#/parameters/stream-path-param'            
        - $ref: '#/parameters/customer-number-param'
        - $ref: '#/parameters/date-from-param'
        - $ref: '#/parameters/date-to-param'
        - $ref: '#/parameters/page-size-param'
        - $ref: '#/parameters/page-param'
        - $ref: '#/parameters/sort-order-param'
        - $ref: '#/parameters/sort-by-param'
        - $ref: '#/parameters/include-param'
        - $ref: '#/parameters/trim-param'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/event-list'
        default:
            $ref: '#/responses/default-error-response'
      tags:
        - Events
      x-asee-tags:
        - Pageable
        - Sortable
        - Shapeable
    post:
      summary: Record event
      description: Receords event payload and metadata to a stream. Metadata and payload are scanned for presence of `customer-number` attribute used to index events by customers
      operationId: Events_Record
      parameters:
        - $ref: '#/parameters/stream-path-param'      
        - description: Command with details of recorded event
          in: body
          name: cmd
          required: true
          schema:
            $ref: '#/definitions/record-event-command'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/resource-created-result'
          headers:
            Location:
              type: string
              description: The URL where newly recorded event can be accessed 
        400:
          $ref: '#/responses/validation-problem-response'
        440:
          description: |
            Your request was well constructed but it could not be processed. Consider the following possible problems and look into response for more details:

            | Problem | Description |
            |-|-|
            | [event-already-recorded](customer-event-problems.html) | Event already recorded |
            | [unknown-aggregate-kind](customer-event-problems.html) | Unknown aggregate kind |  
            | [unknown-event-stream](customer-event-problems.html) | Unknown event stream | 
            | [event-in-the-future](customer-event-problems.html) | Event cannot be recorded as if it occurred in the future |               
          schema:
            $ref: '#/definitions/business-problem'
                      
        default:
          $ref: '#/responses/default-error-response'
      tags:
        - Events        
  /events/{stream}/{event-id}:
    get:
      summary: Get event details
      description: Response contains event metadata and payload
      operationId: Events_Get
      parameters:
        - $ref: '#/parameters/stream-path-param'      
        - $ref: '#/parameters/event-id-param'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/event-record'
        default:
            $ref: '#/responses/default-error-response'
      tags:
        - Events
      x-asee-tags: []

parameters:
  event-id-param:
    description: Globaly unique identifier of event instance
    in: path
    name: event-id
    required: true
    type: string
    format: uuid
  event-kind-param:
    description: Event kind
    in: query
    name: event-kind
    required: false
    type: string
  stream-path-param:
    description: Literal name of event stream
    name: stream
    required: true
    type: string
    in: path
  stream-param:
    description: Literal name of event stream
    name: stream
    required: false
    type: string
    in: query    
  customer-number-param:
    description: Unique identifier of the customer.
    in: query
    name: customer-number
    required: false
    type: string
  date-from-param:
    description: Filters items that have been registered after specified date
    in: query
    name: date-from
    required: false
    format: date-time
    type: string
  date-to-param:
    description: Filters items that have been registered before specified date
    in: query
    name: date-to
    required: false
    format: date-time
    type: string
  page-param:
    name: page
    in: query
    description: Page index. For more information see general guidance on [paging](common-getstarted.html#paging)
    type: integer
    default: 1
    x-asee-common: true
  page-size-param:
    name: page-size
    in: query
    description: Number of items on a page. For more information see general guidance on [paging](common-getstarted.html#paging)
    required: false
    type: integer
    default: 10
    x-asee-common: true
  sort-order-param:
    description: Sort order (`asc` or `desc`). Default is asc. For more information see general guidance on [sorting](common-getstarted.html#sorting)
    in: query
    name: sort-order
    type: string
    default: asc
    enum:
    - asc
    - desc
    x-asee-common: true
  sort-by-param:
    description: Attribute of the collection item to sort by. For more information see general guidance on [sorting](common-getstarted.html#sorting)
    in: query
    name: sort-by
    type: string
    x-asee-common: true
  include-param:
    description: List of fields to include in response. For more information see general guidance on [response shaping](common-getstarted.html#shaping)
    in: query
    name: include
    type: array
    items:
      type: string
    collectionFormat: csv
    x-asee-common: true      
  trim-param:
    description: List of fields to trim from response. For more information see general guidance on [response shaping](common-getstarted.html#shaping)
    in: query
    name: trim
    type: array
    items:
      type: string
    collectionFormat: csv
    x-asee-common: true    

definitions:
  event-list:
    description: Paged list of customer events
    allOf:
    - $ref: '#/definitions/paged-list'
    properties:
      events:
        description: List of customer events
        type: array
        items:
          $ref: '#/definitions/event-record'
    example:
      total-count: 13
      page-size: 2
      page: 1
      total-pages: 7
      sort-order: desc
      sort-by: metadata.occurred-on
      events:
        - 
          metadata:
            event-kind: 'content#document-filed'
            version: 1
            occurred-on: "2016-01-01T08:00:14.3000Z"
            event-id: 960ff4a9-dec5-41de-8275-2b4344e93272
            aggregate-kind: 'content#document'
            aggregate-id: uDJ18kd2jd
            customer-number: nodjo001
          payload:
            occurred-on: "2016-01-01T08:01:20.1000Z"
            id: ee48b17534c9
            changed-on: "2016-01-01T08:01:20.1000Z"
            created-on: "2016-01-01T08:01:20.1000Z"
            created-by: JABON0007
            name: headshot.png
            path: JABON0007/images
            kind: document
            media-type: image/png
            filing-purpose: profile-photo
            filing-case-number: JABON0007
            size-in-bytes: 21231
        - 
          metadata:
            event-kind: 'accounting#statement-generated'
            version: 1            
            occurred-on: "2016-01-01T08:00:14.3000Z"
            event-id: d67cbc86-f83f-4e39-9e18-71320611a982
            aggregate-kind: 'accounting#account'
            aggregate-id: 0020100001020104EUR
            customer-number: nodjo001
          payload:
            from-date: 2016-01-01
            to-date: 2016-01-31
            account-number: 00210102101
            sequence-number: 26
            generated: 2016-02-01T01:25:00
            document: AS-0021000102101-26
            total-credits: 1
            total-debits: 3
            currency: EUR
            opening-balance: 20.00
            closing-balance: 180.00
            
  event-record:
    description: 'Details about event related to customer'
    properties:
      metadata:
        $ref: '#/definitions/event-metadata'
      payload:
        description: Event payload in json format
        type: object
        additionalProperties: {}
    example:
      metadata:
        event-kind: 'accounting#statement-generated'
        version: 1            
        occurred-on: "2016-01-01T08:00:14.3000Z"
        event-id: d67cbc86-f83f-4e39-9e18-71320611a982
        aggregate-kind: 'accounting#account'
        aggregate-id: 0020100001020104EUR
        customer-number: nodjo001
      payload:
        from-date: 2016-01-01
        to-date: 2016-01-31
        account-number: 00210102101
        sequence-number: 26
        generated: 2016-02-01T01:25:00
        document: AS-0021000102101-26
        total-credits: 1
        total-debits: 3
        currency: EUR
        opening-balance: 20.00
        closing-balance: 180.00 

  event-metadata:
    properties:
      event-kind:
        type: string
        description: "Unique kind of event. Example `content#document-filed`"
        format: kind          
      version:
        type: integer
        format: int32
        description: Version of the event payload. Events have new versions when we need to capture different information on event that still has the same nature. Version is integer that is incremented        
      occurred-on:
        type: string
        format: date-time
        description: Date and time when  event occurred
      event-id:
        description: Globaly unique identifier of event instance
        format: uuid
        type: string
      aggregate-kind: 
        type: string
        description: "Kind of aggregate (DDD) that this event describes. Example `content#document`"
        format: kind
      aggregate-id:
        type: string
        description: Unique identifier of aggregate (DDD) that published the event
      customer-number:
        type: string
        description: "Unique identifier of customer in bank's records"      

  record-event-command:
    description: Parameters for event registration.
    properties:
      recorded-event:
        $ref: '#/definitions/event-record'
    example:
      recorded-event:
        metadata:
          event-kind: 'accounting#statement-generated'
          version: 1            
          occurred-on: "2016-01-01T08:00:14.3000Z"
          event-id: d67cbc86-f83f-4e39-9e18-71320611a982
          aggregate-kind: 'accounting#account'
          aggregate-id: 0020100001020104EUR
          customer-number: nodjo001
        payload:
          from-date: 2016-01-01
          to-date: 2016-01-31
          account-number: 00210102101
          sequence-number: 26
          generated: 2016-02-01T01:25:00
          document: AS-0021000102101-26
          total-credits: 1
          total-debits: 3
          currency: EUR
          opening-balance: 20.00
          closing-balance: 180.00

  resource-created-result:
    description: Unique identifier of newly created resource that can be used in future inquires and commands
    properties:
      id: 
        type: string
        description: Indetifier
    example:
      id: "123jd88j811"

  business-problem:
    description: Details on specific problem that prevented processing after successfull validation
    type: object 
    properties:
      problem:
        description: Unique literal that identifies specific problem 
        type: string
      message:
        description: Message explaining the situation and optionaly remedies
        type: string
      details:
        description: Optional details supplied for troubleshooting
        type: string
    example:
      problem: document-locked
      message: Document you are trying to access is locked by another user
      details: User john.doe has locked the document

  validation-problem:
    type: array
    items:
      type: object
      properties:
        field:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
    example:
      -  
        field: phone-number
        errors:
          -
            error: invalid-format
            message: Format for this field is invalid
          -
            error: max-length
            message: Content exceeds maximum alowed length 
      - 
        field: account-number
        errors:
          -
            error: check-digit-invalid
            message: Check digit is invalid for this field      
  
  paged-list:
    description: List with support for paging
    properties:
      total-count:
        description: Total number of items in collection
        type: integer
      page-size:
        description: Size of the page
        type: integer
      page:
        description: Index of current page
        type: integer
      total-pages:
        description: Total number of pages of set size
        type: integer
      sort-order:
        description: Sort order (`asc` or `desc`). Default is asc
        type: string
        enum:
        - asc
        - desc
      sort-by:
        description: Attribute of the collection item to sort by
        type: string
responses:
  validation-problem-response:
    description: Your request was not constructed properly. Response contains the list of validation errors for each invalid element of your request. For complete list of possible validation errors see [validation errors](common-getstarted.html#error-handling).
    schema: 
      $ref: '#/definitions/validation-problem'
  default-error-response:
    description: Besides specific status codes above, other standard http [status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) can be returned for each request. To learn more see general guidance on [error handling](common-getstarted.html#error-handling)