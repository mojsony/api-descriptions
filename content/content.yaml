swagger: "2.0"
x-asee-visibility: public
info:
  version: v1
  title: Content API
  description: |
    Content API offers alows access to repositories of unstructured content such as documents, templates and images organized into folder structure. API exposes operations to and download content and manipulate its metadata. Document binary content is streamed as appropriate MIME media type.
  contact:
    name: Aleksandar Milosevic
    url: https://bankapi.net/docs/public/content-getstarted.html
    email: aca@see.asseco.com
host: bankapi.net
basePath: /v1/content
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
tags:
  -
    name: Repositories
    description: Working with repositories
  -
    name: Folders
    description: Working with folders
  -
    name: Documents
    description: Working with documents
  -
    name: Classifications
    description: Working with classifications

paths:
  /repositories:
    get:
      summary: List available content repositories
      description: Response contains list of repositories that are available for access. Some repositories offer allow anonimous access to certain folder while other offer access to authenticated users
      tags:
        - Repositories
      operationId: Repositories_GetList
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/repository-list'
        default:
          $ref: '#/responses/default-error-response'
  /repositories/{repo}:
    parameters:
      - $ref: "#/parameters/repository-name"
    get:
      summary: Get information about the specific repository
      description: Response contain general information about specific content repository
      tags:
        - Repositories
      operationId: Repositories_Get
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/repository'
        default:
          $ref: '#/responses/default-error-response'

  /{repo}/{path}:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/path"
    get:
      summary: List folder contents by path
      description: |
        Returns list of contents for folder at given path
        > **NOTE** If path parameter is empty, implicit root folder `/` of repository is assummed and all documents and folders in root path are returned.
      tags:
        - Folders
      x-asee-tags:
        - Sortable
        - Pageable
      operationId: Folders_GetContentsByPath
      parameters:
        - $ref: "#/parameters/kind-param"
        - $ref: "#/parameters/subfolders-param"
        - $ref: "#/parameters/page-param"
        - $ref: "#/parameters/page-size-param"
        - $ref: "#/parameters/sort-by-param"
        - $ref: "#/parameters/sort-order-param"
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/content-item-list'
        default:
          $ref: '#/responses/default-error-response'

  /{repo}/{path}/search:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/path"
    get:
      summary: Search folder contents by path
      description: Response contains list of specified folder's contents that match search query. When subfolders parameter is present search includes matching cotent from all subfolders
      tags:
        - Folders
      x-asee-tags:
        - Pageable
        - Searchable
      operationId: Folders_SearchContentsByPath
      parameters:
        - $ref: "#/parameters/search-query-param"
        - $ref: "#/parameters/search-mode-param"
        - $ref: "#/parameters/search-fields-param"
        - $ref: "#/parameters/search-content-param"
        - $ref: "#/parameters/kind-param"
        - $ref: "#/parameters/subfolders-param"
        - $ref: "#/parameters/page-param"
        - $ref: "#/parameters/page-size-param"
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/content-item-list'
        default:
          $ref: '#/responses/default-error-response'
  /{repo}/folders/{id}/search:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/folder-id-param"
    get:
      summary: Search folder contents
      description: Response contains list of specified folder's contents that match search query. When subfolders parameter is present search includes matching cotent from all subfolders
      tags:
        - Folders
      x-asee-tags:
        - Pageable
        - Searchable
      operationId: Folders_SearchContents
      parameters:
        - $ref: "#/parameters/search-query-param"
        - $ref: "#/parameters/search-mode-param"
        - $ref: "#/parameters/search-fields-param"
        - $ref: "#/parameters/search-content-param"
        - $ref: "#/parameters/kind-param"
        - $ref: "#/parameters/subfolders-param"
        - $ref: "#/parameters/page-param"
        - $ref: "#/parameters/page-size-param"
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/content-item-list'
        default:
          $ref: '#/responses/default-error-response'
  /{repo}/{path}/metadata:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/path"
    get:
      summary: Get folder metadata by path
      description: Response contains metadata for specified folder
      tags:
        - Folders
      operationId: Folders_GetMetadataByPath
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/folder'
        default:
          $ref: '#/responses/default-error-response'

  /{repo}/folders/{id}/metadata:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/folder-id-param"
    get:
      summary: Get folder metadata
      description: Response contains metadata for specified folder
      tags:
        - Folders
      operationId: Folders_GetMetadata

      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/folder'
        default:
          $ref: '#/responses/default-error-response'
    put:
      summary: Update folder properties
      description: Updates writeable metadata for specified folder
      tags:
        - Folders
      operationId: Folders_UpdateMetadata
      parameters:
        -
          name: payload
          in: body
          description: Metadata to update
          required: true
          schema:
            $ref: '#/definitions/folder'
      responses:
        '200':
          description: Folder matadata updated
          schema:
            $ref: '#/definitions/folder'
        '400':
          $ref: "#/responses/validation-problem-response"
        '440':
          description: |
            Your request was well constructed but it does not comply with business policy. Consider the following possible problems and look into response for more details:

            - [folder-locked](content-problems.html)
            - [folder-archived](content-problems.html)
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'

  /{repo}/folders/{id}/upload-multiple:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/folder-id-param"
    post:
      summary: Upload multiple documents to folder in one request
      description: |
        Uploads multiple documents with single http request as multiple binary content streams within form-data representation. Once server receives complete request it stores it one by one in a backing repository. Storing files into backing repository is not transactional operation. Content stream size must not exceed `50 MB`. Maximum nuber of documents is `5`. Metadata will be matched with content streams in order they are submitted
      tags:
        - Documents
      operationId: Documents_UploadMultiple
      consumes:
      - multipart/form-data
      parameters:
        -
          name: content-stream-1
          in: formData
          description: Document content uploaded as file 1
          type: file
          required: true
        -
          name: content-stream-2
          in: formData
          description: Document content uploaded as file 2
          type: file
          required: true
        -
          name: content-stream-3
          in: formData
          description: Document content uploaded as file 3
          type: file
          required: false
        -
          name: content-stream-4
          in: formData
          description: Document content uploaded as file 4
          type: file
          required: false
        -
          name: content-stream-5
          in: formData
          description: Document content uploaded as file 5
          type: file
          required: false
        -
          name: names
          in: formData
          description: Comma separated list of file names
          required: true
          type: array
          items:
            type: string
        -
          name: media-types
          in: formData
          description: |
            Comma separated list of MIME Media Types that describes format of the docuements content streams as deÔ¨Åned by RFC2045 and RFC2046.
            Commonly used media type examples are image/png, image/jpg, application/pdf and application/msword.
            Complete list can be found at [IANA Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml).
          required: true
          type: array
          items:
            type: string
        -
          name: filing-purposes
          in: formData
          description: Comma sepparated list of classification values explaining intended use of the uploaded documents within business. Commonly used filing purposes are arrangement-document, mandate-document and profile-photo. For a complete list of possible values see [filing-purpose](content-classifications.html#filing-purpose) classification.
          required: true
          type: array
          items:
            type: string
        -
          name: filing-case-numbers
          in: formData
          description: Comma separated list of identifies of the cases related to uploaded documents such as arrangment-number and workitem-number.
          required: true
          type: array
          items:
            type: string
        -
          name: overwrite-if-exists
          in: formData
          description: If present and true any existing documents having same name will be overwritten
          required: true
          type: boolean
          default: false
      responses:
        '201':
          description: Documents uploaded
          schema:
            $ref: "#/definitions/document-list"
        '440':
          description: |
            Your request was well constructed but it does not comply with business policy. Consider the following possible problems and look into response for more details:

            - [folder-locked](content-problems.html)
            - [folder-archived](content-problems.html)
            - [max-upload-size-exceeded](content-problems.html)
            - [document-already-exists](content-problems.html)
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'
  /{repo}/folders/{id}:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/folder-id-param"
    delete:
      summary: Delete folder
      description: |
        Deletes specified folder
        > **WARNING**: Depending on parameters specified and repository policy this operation may delete folder with all its contents and subfolders'
      tags:
        - Folders
      operationId: Folders_Delete
      parameters:
        - name: delete-content-and-subfolders
          in: query
          type: boolean
          default: false
          description: If present and true, folder will be deleted with all content and subfolders. Otherwise error will be returned if folder is not empty.
      responses:
        '200':
          description: Success
        '440':
          description: |
            Your request was refused due to business policy. Consider the following possible problems and look into response for more details:

            - [folder-locked](content-problems.html)
            - [folder-archived](content-problems.html)
            - [folder-not-empty](content-problems.html)
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'
    post:
      summary: Upload document to folder
      description: Uploads document content stream to specified folder. Content stream size must not exceed `50 MB`
      tags:
        - Documents
      operationId: Documents_Upload
      consumes:
      - multipart/form-data
      parameters:
        -
          name: content-stream
          in: formData
          description: Document content uploaded as file
          type: file
          required: true
        -
          name: name
          in: formData
          description: Name of the file with extension
          required: true
          type: string
        -
          name: media-type
          in: formData
          description: |
            MIME Media Type that describes format of the docuements content stream as deÔ¨Åned by RFC2045 and RFC2046.
            Commonly used media type examples are image/png, image/jpg, application/pdf and application/msword.
            Complete list can be found at [IANA Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml).
          required: true
          type: string
        -
          name: filing-purpose
          in: formData
          description: Classification explaining what intended use of the document within business. Commonly used filing purposes are arrangement-document, mandate-document and profile-photo. For a complete list of possible values see [filing-purpose](content-classifications.html#filing-purpose) classification.
          required: true
          type: string
        -
          name: filing-case-number
          in: formData
          description: Identifies the case related to the document such as arrangment, loan application or complaint. Having this file enables flat folder structure where documents in one folder can belong to different cases.
          required: true
          type: string
        -
          name: overwrite-if-exists
          in: formData
          description: If present and true any existing documents having same name will be overwritten
          required: true
          type: boolean
          default: false
      responses:
        '201':
          description: Document uploaded
          schema:
            $ref: '#/definitions/document'
          headers:
            Location:
              description: URI where document content can be downloaded
              type: string
              format: uri
        '440':
          description: |
            Your request was well constructed but it does not comply with business policy. Consider the following possible problems and look into response for more details:

            - [folder-locked](content-problems.html)
            - [folder-archived](content-problems.html)
            - [max-upload-size-exceeded](content-problems.html)
            - [document-already-exists](content-problems.html)
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'
  /{repo}/folders:
    parameters:
      - $ref: "#/parameters/repository-name"
    post:
      summary: Create new folder in repository
      description: Creates new folder under specified parent path
      tags:
        - Folders
      operationId: Folders_Create
      parameters:
        -
          name: new-folder
          in: body
          description: Folder to be created
          required: true
          schema:
            $ref: '#/definitions/folder'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/folder'
        '440':
          description: |
            Your request was well constructed but it does not comply with business policy. Consider the following possible problems and look into response for more details:

            - [folder-locked](content-problems.html)
            - [folder-archived](content-problems.html)
            - [folder-already-exists](content-problems.html)
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'

  /{repo}/{path}/{file-name}/metadata:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/path"
      - $ref: "#/parameters/file-name"
    get:
      summary: Get document metadata by path and file name
      description: Response contains metadata for specified document
      tags:
        - Documents
      operationId: Documents_GetMetadataByPath
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/document'
        default:
          $ref: '#/responses/default-error-response'
  /{repo}/{path}/{file-name}:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/path"
      - $ref: "#/parameters/file-name"
    get:
      summary: Dowlnoad document content by path
      description: Response contains document content stream with specific `Content-Type` and `Content-Disposition` headers
      produces:
      - image/jpg
      - image/png
      - application/pdf
      - application/octet-stream
      tags:
        - Documents
      operationId: Documents_DownloadByPath
      responses:
        '200':
          description: Success
          schema:
            type: file
        default:
          $ref: '#/responses/default-error-response'
  /{repo}/documents/{id}/metadata:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/document-id-param"
    get:
      summary: Get document metadata
      description: Response contains metadata for specified document
      tags:
        - Documents
      operationId: Documents_GetMetadata
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/document'
        default:
          $ref: '#/responses/default-error-response'
    put:
      summary: Update document metadata
      description: Updates writeable metadata for specified document
      tags:
        - Documents
      operationId: Documents_UpdateMetadata

      parameters:
        - $ref: "#/parameters/repository-name"
        - $ref: "#/parameters/document-id-param"
        -
          name: payload
          in: body
          description: Metadata to be updated
          required: true
          schema:
            $ref: '#/definitions/document'
      responses:
        '200':
          description: Document metadata updated
          schema:
            $ref: '#/definitions/document'
        '400':
          $ref: "#/responses/validation-problem-response"
        '440':
          description: |
            Your request was well constructed but it does not comply with business policy. Consider the following possible problems and look into response for more details:

            - [document-locked](content-problems.html)
            - [document-archived](content-problems.html)
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'
  /{repo}/documents/{id}:
    parameters:
      - $ref: "#/parameters/repository-name"
      - $ref: "#/parameters/document-id-param"
    get:
      summary: Dowlnoad document content
      description: Response contains document content stream with specific `Content-Type` and `Content-Disposition` headers
      produces:
      - image/jpg
      - image/png
      - application/pdf
      - application/octet-stream
      tags:
        - Documents
      operationId: Documents_Download
      responses:
        '200':
          description: Success
          schema:
            type: file
        default:
          $ref: '#/responses/default-error-response'
    delete:
      summary: Delete document
      description: Deletes both metadata and content stream of specified document
      tags:
        - Documents
      operationId: Documents_Delete
      responses:
        '200':
          description: Document was deleted
        '440':
          description: |
            Your request was refused due to business policy. Consider the following possible problems and look into response for more details:

            - [document-locked](content-problems.html)
            - [document-archived](content-problems.html)
          schema:
            $ref: '#/definitions/business-problem'
        default:
          $ref: '#/responses/default-error-response'

# ****************************************************#
# ENDPOINTS COMMON WITH OTHER APIs                    #
# ****************************************************#

  /classifications:
    get:
      summary: List all classification schemas used by the API
      description: Some fields and parameters have been restricted to a list of allowed lookup values maintained by the bank. This method lists all schemas used in this API.
      operationId: "Classifications_GetList"
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/classification-list'
        default:
          $ref: '#/responses/default-error-response'
      tags:
        - Classifications
  /classifications/{schema-id}:
    get:
      summary: List values allowed by given classification schema.
      description: Returns all classification values for chosen classification.
      operationId: Classifications_Get
      parameters:
        - $ref: '#/parameters/schema-id-param'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/classification'
        default:
          $ref: '#/responses/default-error-response'
      tags:
        - Classifications

responses:
  validation-problem-response:
    description: Your request was not constructed properly. Response contains the list of validation errors for each invalid element of your request. To learn more see general guidance on [validation](common-getstarted.html#validation).
    schema:
      $ref: '#/definitions/validation-problem'
  default-error-response:
    description: Besides specific status codes above, other standard http [status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) can be returned for each request. To learn more see general guidance on [error handling](common-getstarted.html#error-handling)
parameters:
  page-param:
    name: page
    in: query
    description: Page index. For more information see general guidance on [paging](common-getstarted.html#paging)
    type: integer
    default: 1
    x-asee-common: true
  page-size-param:
    name: page-size
    in: query
    description: Number of items on a page. For more information see general guidance on [paging](common-getstarted.html#paging)
    required: false
    type: integer
    default: 10
    x-asee-common: true
  sort-order-param:
    description: Sort order (`asc` or `desc`). Default is asc. For more information see general guidance on [sorting](common-getstarted.html#sorting)
    in: query
    name: sort-order
    type: string
    default: asc
    enum:
    - asc
    - desc
    x-asee-common: true
  sort-by-param:
    description: Attribute of the collection item to sort by. For more information see general guidance on [sorting](common-getstarted.html#sorting)
    in: query
    name: sort-by
    type: string
    x-asee-common: true
  search-query-param:
    name: q
    in: query
    description: The text to search for. All searchable fields are searched by default unless search-fields is specified. When searching searchable fields, the search text itself is tokenized, so multiple terms can be separated by white space (e.g. `q=hello world`).
    required: true
    type: string
  search-fields-param:
    description: The list of comma-separated field names to search for the specified text. Target fields must be marked as searchable
    in: query
    name: search-fields
    type: array
    items:
      type: string
    collectionFormat: csv
  search-mode-param:
    name: search-mode
    in: query
    description: Specifies whether any or all of the search terms must be matched in order to count the document as a match.
    type: string
    enum:
    - any
    - all
    required: false
  search-content-param:
    name: search-content
    in: query
    allowEmptyValue: true
    description: Specifies wheather to search in document content
    required: false
    type: boolean
    default: false
  schema-id-param:
    name: schema-id
    in: path
    required: true
    type: string
  repository-name:
    name: repo
    in: path
    description: Name of the repository such as `mchub` or `dms`
    required: true
    type: string
    default: dms
  folder-id-param:
    name: id
    in: path
    description: Unique identifier of folder in repository
    required: true
    type: string
  document-id-param:
    name: id
    in: path
    description: Unique identifier of folder in repository
    required: true
    type: string
  path:
    name: path
    in: path
    description: "Path of the folder. Hiararchy of folders separated with forward slash eg. `folder1/folder2/folder3`. Leading and trailing slashes will be trimmed. If empty, implicit root folder of repository is assumed"
    required: true
    type: string
    format: folder-path
  file-name:
    name: file-name
    in: path
    description: Name of the file with extension such as `image.jpg`
    required: true
    type: string
    format: file-name
  kind-param:
    name: kind
    in: query
    description: Kind of content item to include in response. Default is `any`
    required: false
    type: string
    enum:
    - folder
    - document
    - any
    default: any
  subfolders-param:
    name: subfolders
    in: query
    allowEmptyValue: true
    description: Include contents of subfolders
    required: false
    type: boolean
    default: false

definitions:

# ****************************************************#
# DEFINITIONS OF MODELS COMMON WITH OTHER APIs        #
# ****************************************************#

  
  validation-problem:
    description: Details of failed validation
    properties:
      errors:
        description: List of validation errors
        type: array
        items:
          type: object
          properties:
            tag:
              description: Name of input element (field or parameter) that is in invalid. If missing or null it is interpreted that validation error refers to entire request rather than to specific element. 
              type: string          
            error:
              description: Unique literal that identifies kind of validation error               
              type: string
            message:
              description: Message that explains failed validation. To support translation message may embed variable parameters in curly brackets. 
              type: string
    example:
      errors:
        -
          tag: phone-number
          error: invalid-format
          message: Format for this field is invalid
        -
          tag: phone-number        
          error: max-length
          message: Content exceeds maximum alowed length 
        -
          tag: account-number
          error: check-digit-invalid
          message: Check digit is invalid for this field
          
  business-problem:
    description: Explanation of business rule that rejected request
    properties:
      problem:
        type: string
        description: Unique literal that identifies specific problem
      message:
        type: string
        description: Message explaining the situation and optionaly remedies
      details:
        type: string
        description: Optional details supplied for troubleshooting
    example:
      problem: document-locked
      message: Document you are trying to a is locked by another user.
      details: User john.doe has locked the document.
  paged-list:
    description: List with support for paging
    properties:
      total-count:
        description: Total number of items in collection
        type: integer
      page-size:
        description: Size of the page
        type: integer
      page:
        description: Index of current page
        type: integer
      total-pages:
        description: Total number of pages of set size
        type: integer
      sort-order:
        description: Sort order (`asc` or `desc`). Default is asc
        type: string
        enum:
        - asc
        - desc
      sort-by:
        description: Attribute of the collection item to sort by
        type: string
  classification-value:
    type: object
    description: Classification value
    properties:
      literal:
        description: Literal that uniquely identifies classification value
        type: string
      code:
        description: Optional numerical code of classification value
        type: string
      description:
        description: Description of classification value
        type: string
      parent-literal:
        description: Optional literal of parent classification value if schema is hierarchical
        type: string
    example:
      literal: billing
      code: 2
      description: Contact may be used to provide party with details of their liabilities to the bank
  classification-list:
    description: List of classification schemas used by this API
    type: object
    properties:
      items:
        description: List of classification schemas
        items:
          $ref: "#/definitions/classification-info"
        type: array
    example:
      -
        schema-id: filing-purpose
        name: Filing Purpose
        description: List of possible uses of document in business context. Commonly used filing purposes are document, customer-picture
      -
        schema-id: folder-purpose
        name: Folder Purpose
        description: List of possible uses of a folder in business context.
  classification-info:
    description: Basic information on classification schema
    properties:
      schema-id:
        type: string
        description: Unique literal that identifies the classification schema. Always in `lowercase-dash` convention.
      name:
        type: string
        description: User friendly name of classification
      description:
        type: string
        description: Description of a classification
    example:
      schema-id: filing-purpose
      name: Filing Purpose
      description: List of possible uses of document in business context. Commonly used filing purposes are document, customer-picture
  classification:
    type: object
    description: Classification schema model
    properties:
      schema-id:
        type: string
        description: Unique literal that identifies the classification schema. Always in `lowercase-dash` convention.
      name:
        type: string
        description: User friendly name of classification
      description:
        type: string
        description: Description of a classification
      values:
        description: List of allowed classification values
        type: array
        items:
          $ref: "#/definitions/classification-value"
    example:
      schema-id: contact-purpose
      name: Contact Purpose
      description: List of possible purposes for which a channel or contact point is used
      values:
        - literal: any
          code: 0
          description: Contact may be used for any purpose as contacted party has not indicated any preference.
        - literal: marketing
          code: 1
          description: Contact may be used to provide details about general products or services provided by the bank or partner organization.
        - literal: billing
          code: 2
          description: Contact may be used to provide party with details of their liabilities to the bank
        - literal: relationship
          code: 3
          description: Contact may be used to maintain and manage bank's relationship with the party

# ***********************************************************
# DEFINITIONS SCPEFIC TO CONTENT API
# ***********************************************************

  repository-list:
    description: List of repositories
    properties:
      repositories:
        type: array
        items:
          $ref: '#/definitions/repository'
    example:
      -
        repository-id: 1
        repository-name: mchub
      -
        repository-id: 2
        repository-name: dms
  repository:
    description: Repository information
    properties:
      repository-id:
        type: string
      repository-name:
        type: string
    example:
      repository-id: 1
      repository-name: dms
  content-item:
    description: Base content management object that contains fields shared between folders and documents
    type: object
    discriminator: kind
    required:
    - kind
    properties:
      id:
        type: string
        description: Unique identifier of folder or document within repository. Each repository may have different format of identifiers
        readOnly: true
      changed-on:
        type: string
        format: date-time
        description: Time and date when document or folder was last changed
        readOnly: true
      created-on:
        type: string
        format: date-time
        description: Time and date when document or folder was created
        readOnly: true
      created-by:
        type:
          string
        description: Identifier of the party (customer or agent) that created document or folder. Can be `system` when object was created by non-interractive backend process
        readOnly: true
      name:
        type: string
        description: Name of the file or folder. File names may include extension
      path:
        type: string
        readOnly: true
      kind:
        type: string
        enum:
          - folder
          - document
      extended:
        additionalProperties:
          type: object
    example:
      id: ee48b17534c9
      changed-on: 2015-10-20T23:22:10
      created-on: 2015-11-23T07:08:30
      created-by: JABON0007
      name: headshot.png
      path: JABON0007/images
      kind: document
  content-item-list:
    description: List of content items
    allOf:
      - $ref: '#/definitions/paged-list'
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: '#/definitions/content-item'
    example:
      items:
        -
          id: ee48b17534c9
          changed-on: 2015-10-20T23:22:10
          created-on: 2015-11-23T07:08:30
          created-by: JABON0007
          name: headshot.png
          path: JABON0007/images
          kind: document
        -
          id: ee48b17534c9
          changed-on: 2015-10-20T23:22:10
          created-on: 2015-11-23T07:08:30
          created-by: JABON0007
          name: headshot.png
          path: JABON0007/images/archived
          kind: folder
      total-count: 2
      page-size: 10
      page: 1
      total-pages: 1
      sort-order: desc
      sort-by: created-on
  document-list:
    description: List of documents
    properties:
      documents:
        type: array
        items:
          $ref: '#/definitions/document'
    example:
      documents:
        -
          id: ee48b17534c9
          changed-on: 2015-10-20T23:22:10
          created-on: 2015-11-23T07:08:30
          created-by: JABON0007
          name: headshot.png
          path: JABON0007/images
          kind: document
        -
          id: ee48b17534c9
          changed-on: 2015-10-20T23:22:10
          created-on: 2015-11-23T07:08:30
          created-by: JABON0007
          name: headshot.png
          path: JABON0007/images/archived
          kind: folder
  folder:
    type: object
    description: A container for documents and child folders.
    allOf:
      - $ref: '#/definitions/content-item'
      - type: object
        properties:
          folder-purpose:
            type: string
            readOnly: false
            description: Classification explaining intended use of folder in business context. Commonly used values include generic-folder, client-folder, arrangement-folder, case-folder, order-folder. For a complete list of possible values see [folder-purpose](content-classifications.html#folder-purpose) classification
    example:
      id: ee48b17534c9
      changed-on: 2015-10-20T23:22:10
      created-on: 2015-11-23T07:08:30
      created-by: JABON0007
      name: images
      path: JABON0007/images
      kind: folder
      folder-purpose: generic-folder
  document:
    type: object
    description: Represents elementary information entity managed by the repository
    allOf:
      - $ref: '#/definitions/content-item'
      - type: object
        properties:
          media-type:
            type: string
            description: |
              MIME Media Type that describes format of the docuements content stream as deÔ¨Åned by RFC2045 and RFC2046.
              Commonly used media type examples are image/png, image/jpg, application/pdf and application/msword.
              Complete list can be found at [IANA Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml).
          filing-purpose:
            type: string
            description: Classification explaining what intended use of the document within business. Commonly used filing purposes are arrangement-document, mandate-document and profile-photo. For a complete list of possible values see [filing-purpose](content-classifications.html#filing-purpose) classification.
          filing-case-number:
            type:
              string
            description: Identifies the case related to the document such as arrangment, loan application or complaint. Having this file enables flat folder structure where documents in one folder can belong to different cases.
          size-in-bytes:
            type: integer
            description: Size of the document in bytes
            readOnly: true
    example:
      id: ee48b17534c9
      changed-on: 2015-10-20T23:22:10
      created-on: 2015-11-23T07:08:30
      created-by: JABON0007
      name: headshot.png
      path: JABON0007/images
      kind: document
      media-type: image/png
      filing-purpose: profile-photo
      filing-case-number: JABON0007
      size-in-bytes: 21231
